<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>UMich Course Notes</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on UMich Course Notes</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Welcome to my Course Notes</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description>This is just a collection of notes I’ve taken of courses I’ve taken at the University of Michigan, with no rhyme or reason. Maybe I’ll actually organize them at some point ¯_(ツ)_/¯.</description>
    <pubDate>Tue, 02 Apr 2024 15:40:38 GMT</pubDate>
  </item><item>
    <title>EECS 203 IA Application Video Plan</title>
    <link>https://quartz.jzhao.xyz/ia-applications/EECS-203-IA-Application-Video-Plan</link>
    <guid>https://quartz.jzhao.xyz/ia-applications/EECS-203-IA-Application-Video-Plan</guid>
    <description>Topic: Combinations &amp; Permutations.</description>
    <pubDate>Tue, 02 Apr 2024 03:22:12 GMT</pubDate>
  </item><item>
    <title>EECS 281 IA Application Video Plan</title>
    <link>https://quartz.jzhao.xyz/ia-applications/EECS-281-IA-Application-Video-Plan</link>
    <guid>https://quartz.jzhao.xyz/ia-applications/EECS-281-IA-Application-Video-Plan</guid>
    <description>Topic: Disjoint Set Union and Union-Find Favorite Algorithm / Data Structure Example: we have this random graph and we want to know if a vertex v is connected to another vertex w web ...</description>
    <pubDate>Tue, 02 Apr 2024 03:12:17 GMT</pubDate>
  </item><item>
    <title>Generating Unique Identifiers</title>
    <link>https://quartz.jzhao.xyz/Generating-Unique-Identifiers</link>
    <guid>https://quartz.jzhao.xyz/Generating-Unique-Identifiers</guid>
    <description>Relevant Classes: EECS 482 When implementing a thread library, one of the challenges is to be able to generate a unique identifier for every thread (additionally used to link it with ...</description>
    <pubDate>Mon, 11 Mar 2024 13:41:45 GMT</pubDate>
  </item><item>
    <title>Introduction to Operating Systems</title>
    <link>https://quartz.jzhao.xyz/classes/EECS-482</link>
    <guid>https://quartz.jzhao.xyz/classes/EECS-482</guid>
    <description></description>
    <pubDate>Mon, 11 Mar 2024 13:17:48 GMT</pubDate>
  </item><item>
    <title>Linking</title>
    <link>https://quartz.jzhao.xyz/Linking</link>
    <guid>https://quartz.jzhao.xyz/Linking</guid>
    <description>Related Classes: EECS 370 When linking LC2K Object Files, there are a few situations you can encounter. What to Link Linking simply involves a) checking global labels and b) making any modifications necessary as marked by the Relocation Table.</description>
    <pubDate>Sat, 09 Mar 2024 06:33:45 GMT</pubDate>
  </item><item>
    <title>Pipelining</title>
    <link>https://quartz.jzhao.xyz/Pipelining</link>
    <guid>https://quartz.jzhao.xyz/Pipelining</guid>
    <description>Relevant Classes: EECS 370 When considering a Single-Cycle ProcessorMulti-Cycle Processor]] has a higher CPI, but a lower clock period. With Pipelining, we hope to take the best of both worlds: approach a CPI of 1 while being able to keep a lower clock period.</description>
    <pubDate>Sat, 02 Mar 2024 03:38:38 GMT</pubDate>
  </item><item>
    <title>LC2K Multi-Cycle Datapath</title>
    <link>https://quartz.jzhao.xyz/LC2K-Multi-Cycle-Datapath</link>
    <guid>https://quartz.jzhao.xyz/LC2K-Multi-Cycle-Datapath</guid>
    <description>Related Courses: EECS 370 The idea behind Multi-Cycle processors is that we can break instructions up into several steps, and then execute each step during a clock cycle ...</description>
    <pubDate>Sat, 02 Mar 2024 02:22:54 GMT</pubDate>
  </item><item>
    <title>LC2K Single-Cycle Datapath</title>
    <link>https://quartz.jzhao.xyz/LC2K-Single-Cycle-Datapath</link>
    <guid>https://quartz.jzhao.xyz/LC2K-Single-Cycle-Datapath</guid>
    <description>Related Classes: EECS 370 Note: This is specific for the LC2KISA]] (if you recall, ISAs are intrinsically linked to Assembly, as well as the processor) ...</description>
    <pubDate>Fri, 01 Mar 2024 21:24:39 GMT</pubDate>
  </item><item>
    <title>Read Only Memory (ROM)</title>
    <link>https://quartz.jzhao.xyz/Read-Only-Memory-(ROM)</link>
    <guid>https://quartz.jzhao.xyz/Read-Only-Memory-(ROM)</guid>
    <description>Relevant Classe: EECS 370 Read-Only Memory is an “array” of values that are constant and non-volatile. This means that if, for example, the power cuts off, the data is still preserved.</description>
    <pubDate>Fri, 01 Mar 2024 21:03:57 GMT</pubDate>
  </item>
    </channel>
  </rss>